{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","constants.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","registerServiceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","CounterButton","updateCount","setState","count","state","nextProps","nextState","this","color","onClick","Component","Header","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","error","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","rootReducer","createLogger","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f0287534.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n              />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'","import React, { Component } from 'react';\n\nclass CounterButton extends Component {\n    constructor() {\n        super();\n        this.state = {\n            count: 0\n        }\n    }\n    \n    shouldComponentUpdate(nextProps, nextState) {\n        if (this.state.count !== nextState.count) {\n            return true\n        } else {\n            return false\n        }\n    }\n\n    updateCount = () => {\n        this.setState({ count: this.state.count + 1 })\n    }\n\n    render() {\n        return (\n        <button color={this.props.color} onClick={this.updateCount}>Count: {this.state.count}</button>\n        )\n    }\n}\n\nexport default CounterButton;","import React, { Component } from 'react';\nimport CounterButton from './CounterButton';\n\nclass Header extends Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        return false\n    }   \n    render() {\n        return (\n            <div>\n                <CounterButton color={'red'} />\n                <h1 className='f1'>RoboFriends</h1>\n            </div>\n        )\n    }\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport { requestRobots, setSearchField } from '../actions';\nimport Header from '../components/Header';\nimport './App.css';\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends Component {\n\n  componentDidMount() {\n    this.props.onRequestRobots()\n  }\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter(robot =>{\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    return isPending ?\n      <h1>Loading</h1> :\n      (\n        <div className='tc'>\n          <Header />\n          <SearchBox searchChange={onSearchChange}/>\n          <Scroll>\n            <CardList robots={filteredRobots} />\n          </Scroll>\n        </div>\n      );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \n    CHANGE_SEARCH_FIELD, \n    REQUEST_ROBOTS_PENDING, \n    REQUEST_ROBOTS_SUCCESS, \n    REQUEST_ROBOTS_FAILED\n} from './constants'\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response=> response.json())\n      .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n      .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { \n    CHANGE_SEARCH_FIELD, \n    REQUEST_ROBOTS_PENDING, \n    REQUEST_ROBOTS_SUCCESS, \n    REQUEST_ROBOTS_FAILED\n} from './constants'\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, {searchField: action.payload})\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: \"\"\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, { isPending: true })\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, { robots: action.payload, isPending: false })\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, { isPending: false, error: action.payload })\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider, connect } from 'react-redux';\nimport { applyMiddleware, createStore, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger'\nimport thunkMiddleware from 'redux-thunk'\nimport './index.css';\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'tachyons'; \nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger()\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root')\n);\n// registerServiceWorker();\n"],"sourceRoot":""}